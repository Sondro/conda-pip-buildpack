#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir> <env_dir>

set -eo pipefail

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR="${1}"
CACHE_DIR="${2}"
ENV_DIR="${3}"

CACHED_DIRS=".heroku"

PROFILE_PATH="$BUILD_DIR/.profile.d/miniconda.sh"
# Make profile.d directory.
mkdir -p $(dirname $PROFILE_PATH)

# Sanitizing environment variables.
unset GIT_DIR PYTHONHOME PYTHONPATH LD_LIBRARY_PATH LIBRARY_PATH

# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH

# Syntax sugar.
source $BIN_DIR/utils

APP_DIR='/app'

# Copy Application code in.
deep-mv $BUILD_DIR $APP_DIR

# Set new context.
ORIG_BUILD_DIR=$BUILD_DIR
BUILD_DIR=$APP_DIR

# Switch to the repo's context.
cd $BUILD_DIR

# ### The Cache
mkdir -p $CACHE_DIR

# Restore old artifacts from the cache.
for dir in $CACHED_DIRS; do
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done

set +e
# Create set-aside `.heroku` folder.
mkdir .heroku &> /dev/null
set -e

# Actuall do the conda steps.
source $BIN_DIR/steps/conda_compile

# ### Finalize

# Store new artifacts in cache.
for dir in $CACHED_DIRS; do
  rm -rf $CACHE_DIR/$dir
  cp -R $dir $CACHE_DIR/
done

deep-mv $BUILD_DIR $ORIG_BUILD_DIR
